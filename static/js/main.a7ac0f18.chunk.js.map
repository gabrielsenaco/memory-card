{"version":3,"sources":["assets/Alex.png","assets/Marty.png","assets/Gloria.png","assets/Melman.png","assets/Skipper.png","assets/Kowalski.png","assets/Rico.png","assets/Private.png","assets/KingJulien.png","assets/Maurice.png","assets/QueenClover.png","assets/Mort.png","utils.js","objects/CardCharactersBuilder.js","components/Header.js","components/Score.js","components/ScoreDisplay.js","components/MessageCard.js","components/Button.js","components/PlayAgain.js","components/Card.js","components/CardList.js","components/Footer.js","App.js","index.js"],"names":["getRandomArray","array","sort","Math","random","createCardList","list","Alex","Marty","Gloria","Melman","Skipper","Kowalski","Rico","Private","KingJulien","Maurice","QueenClover","Mort","map","name","title","src","clicked","id","uniqid","createCard","Header","Score","props","value","className","ScoreDisplay","scoreValue","bestScoreValue","MessageCard","image","text","alt","Button","onClick","color","bgColor","concat","PlayAgain","clickHandler","Card","CardList","cards","card","handler","bind","Footer","href","target","rel","App","useState","score","setScore","bestScore","setBestScore","setCards","showPlayAgain","setShowPlayAgain","clearClickedCards","updateBestScore","refScore","clearStateWhenScoreReachesLimit","length","useEffect","show","window","scrollTo","top","left","behavior","event","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7ac0f18.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Alex.7e9d8d05.png\";","export default __webpack_public_path__ + \"static/media/Marty.6bac5bd3.png\";","export default __webpack_public_path__ + \"static/media/Gloria.22766751.png\";","export default __webpack_public_path__ + \"static/media/Melman.c7ff4575.png\";","export default __webpack_public_path__ + \"static/media/Skipper.8b47b20c.png\";","export default __webpack_public_path__ + \"static/media/Kowalski.2785f2c5.png\";","export default __webpack_public_path__ + \"static/media/Rico.6dcb3203.png\";","export default __webpack_public_path__ + \"static/media/Private.3879da0c.png\";","export default __webpack_public_path__ + \"static/media/KingJulien.b772d0c2.png\";","export default __webpack_public_path__ + \"static/media/Maurice.5eca87ea.png\";","export default __webpack_public_path__ + \"static/media/QueenClover.06a26b68.png\";","export default __webpack_public_path__ + \"static/media/Mort.03a16264.png\";","export function getRandomArray (array) {\n  return array.sort(() => 0.5 - Math.random())\n}\n","import uniqid from 'uniqid'\n\nimport Alex from './../assets/Alex.png'\nimport Marty from './../assets/Marty.png'\nimport Gloria from './../assets/Gloria.png'\nimport Melman from './../assets/Melman.png'\nimport Skipper from './../assets/Skipper.png'\nimport Kowalski from './../assets/Kowalski.png'\nimport Rico from './../assets/Rico.png'\nimport Private from './../assets/Private.png'\nimport KingJulien from './../assets/KingJulien.png'\nimport Maurice from './../assets/Maurice.png'\nimport QueenClover from './../assets/QueenClover.png'\nimport Mort from './../assets/Mort.png'\n\nimport { getRandomArray } from './../utils'\n\nexport const createCard = ([title, src]) => {\n  return {\n    title,\n    src,\n    clicked: false,\n    id: uniqid()\n  }\n}\n\nexport const createCardList = () => {\n  let list = [\n    ['Alex', Alex],\n    ['Marty', Marty],\n    ['Gloria', Gloria],\n    ['Melman', Melman],\n    ['Skipper', Skipper],\n    ['Kowalski', Kowalski],\n    ['Rico', Rico],\n    ['Private', Private],\n    ['King Julien', KingJulien],\n    ['Maurice', Maurice],\n    ['Queen Clover', QueenClover],\n    ['Mort', Mort]\n  ]\n\n  list = list.map(name => {\n    return createCard(name)\n  })\n\n  return getRandomArray(list)\n}\n","import './../styles/Header.css'\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>Madagascar Memory</h1>\n      <p>\n        Test your memory: click in each image once. You get 1 point for\n        each correct image\n      </p>\n      <p>If you click on an invalid image, you lose</p>\n    </header>\n  )\n}\n\nexport default Header\n","const Score = props => {\n  let { title, value } = props\n\n  return (\n    <div className={'score ' + title}>\n      <h5 className='score-title'>{title}</h5>\n      <p className='score-value'>{value}</p>\n    </div>\n  )\n}\n\nexport default Score\n","import Score from './Score'\nimport './../styles/ScoreDisplay.css'\n\nconst ScoreDisplay = props => {\n  let { scoreValue, bestScoreValue } = props\n\n  return (\n    <div className='score-display'>\n      <Score title='Score' value={scoreValue} />\n      <Score title='Best Score' value={bestScoreValue} />\n    </div>\n  )\n}\n\nexport default ScoreDisplay\n","import './../styles/MessageCard.css'\n\nconst MessageCard = props => {\n  let { image, text } = props\n  return (\n    <div className='message-card'>\n      {image && <img src={image} alt={text} className='message-card-icon' />}\n      <p className='message-card-text'>{text}</p>\n    </div>\n  )\n}\n\nexport default MessageCard\n","import './../styles/Button.css'\n\nconst Button = props => {\n  let { onClick, text, color, bgColor } = props\n\n  let className = 'button'\n  className = className.concat(' ', color || '').concat(' ', bgColor || '')\n\n  return (\n    <button onClick={onClick} className={className}>\n      {text}\n    </button>\n  )\n}\n\nexport default Button\n","import MessageCard from './MessageCard'\nimport Button from './Button'\nimport './../styles/PlayAgain.css'\n\nconst PlayAgain = props => {\n  let { clickHandler, image } = props\n\n  return (\n    <div className='play-again'>\n      <MessageCard image={image} text='Your memory is good! You found all!' />\n      <Button text='Play Again' onClick={clickHandler} />\n    </div>\n  )\n}\n\nexport default PlayAgain\n","import './../styles/Card.css'\n\nconst Card = props => {\n  let { name, src, clickHandler } = props\n\n  return (\n    <figure className='card' onClick={clickHandler}>\n      <img src={src} alt={name} />\n      <figcaption>{name}</figcaption>\n    </figure>\n  )\n}\n\nexport default Card\n","import Card from './Card'\nimport './../styles/CardList.css'\n\nconst CardList = props => {\n  let { cards, clickHandler } = props\n\n  cards = cards.map(card => {\n    let handler = clickHandler.bind(null, card.id)\n    return (\n      <Card\n        key={card.id}\n        src={card.src}\n        name={card.title}\n        clickHandler={handler}\n      />\n    )\n  })\n\n  return <ul className='card-list'>{cards}</ul>\n}\n\nexport default CardList\n","import './../styles/Footer.css'\n\nconst Footer = () => {\n  return (\n    <footer>\n      <a\n        href='https://github.com/gabesenacom/memory-card'\n        target='_blank'\n        rel='noreferrer'\n      >\n        see our repository\n      </a>\n      <a href='https://github.com/gabesenacom' target='_blank' rel='noreferrer'>\n        see author's profile\n      </a>\n    </footer>\n  )\n}\n\nexport default Footer\n","import { useState, useEffect } from 'react'\nimport { createCardList } from './objects/CardCharactersBuilder'\nimport Header from './components/Header'\nimport ScoreDisplay from './components/ScoreDisplay'\nimport PlayAgain from './components/PlayAgain'\nimport CardList from './components/CardList'\nimport Footer from './components/Footer'\nimport { getRandomArray } from './utils'\n\nconst App = () => {\n  let [score, setScore] = useState(0)\n  let [bestScore, setBestScore] = useState(0)\n  let [cards, setCards] = useState(createCardList())\n  let [showPlayAgain, setShowPlayAgain] = useState(false)\n\n  useEffect(() => {\n    setShowPlayAgain(() => {\n      let show = score === cards.length\n      if (show) {\n        window.scrollTo({\n          top: 0,\n          left: 0,\n          behavior: 'smooth'\n        })\n      }\n\n      return show\n    })\n  }, [score, cards.length])\n\n  function handleCardClick (id, event) {\n    clearStateWhenScoreReachesLimit()\n    setCards(cards => {\n      cards = cards.map(card => {\n        if (card.id !== id) return card\n        let clicked = card.clicked\n\n        if (!clicked) {\n          clicked = true\n          setScore(score => {\n            ++score\n            return score\n          })\n        } else {\n          clearClickedCards()\n          updateBestScore()\n          setScore(() => 0)\n        }\n\n        return {\n          ...card,\n          clicked\n        }\n      })\n      return getRandomArray(cards)\n    })\n  }\n\n  function handlePlayAgainClick () {\n    clearStateWhenScoreReachesLimit()\n  }\n\n  function clearClickedCards () {\n    setCards(cards => {\n      cards = cards.map(card => {\n        return {\n          ...card,\n          clicked: false\n        }\n      })\n      return getRandomArray(cards)\n    })\n  }\n\n  function updateBestScore (refScore = score) {\n    setBestScore(bestScore => {\n      if (refScore > bestScore) {\n        bestScore = refScore\n      }\n      return bestScore\n    })\n  }\n\n  function clearStateWhenScoreReachesLimit () {\n    let reachLimit = score === cards.length\n    if (!reachLimit) return\n\n    setShowPlayAgain(() => false)\n    updateBestScore(score)\n    setScore(() => 0)\n    clearClickedCards()\n  }\n\n  function getRandomCards () {\n    return getRandomArray(cards)\n  }\n\n  function getRandomCardImage () {\n    return getRandomCards()[0].src\n  }\n\n  return (\n    <div id='app'>\n      <Header />\n      <main>\n        <ScoreDisplay scoreValue={score} bestScoreValue={bestScore} />\n        {showPlayAgain && (\n          <PlayAgain\n            clickHandler={handlePlayAgainClick}\n            image={getRandomCardImage()}\n          />\n        )}\n        <CardList cards={cards} clickHandler={handleCardClick} />\n      </main>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'reset-css'\nimport './styles/index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}